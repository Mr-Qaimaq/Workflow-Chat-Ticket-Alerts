metadata:
  version: "1"
  dependencies:
    apps:
      - id: dynatrace.automations
        version: ^1.1428.0
      - id: dynatrace.slack
        version: ^2.3.0
  inputs:
    - type: connection
      schema: app:dynatrace.slack:connection
      targets:
        - tasks.sandbox_message.connection
workflow:
  title: Opened Customer Chats v2.0
  tasks:
    variables:
      name: variables
      description: For storing variables that will be used in workflow execution
      action: dynatrace.automations:run-javascript
      input:
        script: >-
          // optional import of sdk modules

          import { execution } from '@dynatrace-sdk/automation-utils';


          export default async function ({ execution_id }) {
            const name = "..."
            const email = "...@dynatrace.com"

            // Totango token
            // https://support.totango.com/hc/en-us/articles/203036939-Personal-Access-Token-and-Service-ID#01GSKRV5MS5573EKJAR6CJHXPR
            const token = "..."

            // Enable/disable specific notification
            const enableNewAlert = true;         // Notify about new opened chat/ticket
            const enableSolveAlert = true;       // Notify about solved chat/ticket
            const enableTransferAlert = true;    // Notify about transfer from chat/ticket to ticket/chat
            const enableSevChangeAlert = true;   // Notify about chat/ticket severity change
            //const enableLongChat = true;       // Notify about long opened chats

            // Slack Workflow URL
            const slackWorkflowURL = "...";
            
            return { 
              name: name, 
              email: email, 
              token: token, 
              slackWorkflowURL: slackWorkflowURL,
              enableNewAlert: enableNewAlert,
              enableSolveAlert: enableSolveAlert,
              enableTransferAlert: enableTransferAlert,
              enableSevChangeAlert: enableSevChangeAlert
            };
          }
      position:
        x: 0
        y: 1
      predecessors: []
    main_script:
      name: main_script
      description: Build a custom task running js Code
      action: dynatrace.automations:run-javascript
      input:
        script: >+
          import { execution } from '@dynatrace-sdk/automation-utils';

          import { metricsClient } from
          '@dynatrace-sdk/client-classic-environment-v2';

          import { businessEventsClient } from
          '@dynatrace-sdk/client-classic-environment-v2';


          // Global variables

          let bizeventResult = {}

          var slackResponse = "*Zendesk chat updates:*";

          var slackWorkflowResponse = {};

          let constVariables;



          // main function

          export default async function ({ execution_id }) {
            
            const ex = await execution(execution_id);

            // Getting results from other tasks
            const totangoResult = await ex.result("query_totango");
            bizeventResult = await ex.result("get_bizevents");
            constVariables = await ex.result("variables");

            // Function to loop over the tickets
            totangoResult.json.response.collections.hits.forEach(iterationFunction);

            return {
              slackResponse: slackResponse,
              slackWorkflowResponse: slackWorkflowResponse
            };
          }



          /**
           * Function to ingest each of the tickets.
           * @param {Object} ticket - The ticket object containing all necessary information.
           */
          function iterationFunction (ticket) {

            // Converting the Totango ticket result to Bizevent object
            let newBizevent = {
              "specversion": "1.0",
              "type": "zendesk.ticket.v2",
              "source": "automated.workflow",
              "id": extractTicketId(ticket.selected_fields[0]),
              "datacontenttype": "application/json",
              "data": {
                "ticket_link": ticket.selected_fields[0],
                "customer": getEmailDomain(ticket.selected_fields[1]),
                "customer_email": ticket.selected_fields[1],
                "channel": ticket.selected_fields[2],
                "assigned_team": ticket.selected_fields[3],
                "topic": ticket.selected_fields[4],
                "severity": ticket.selected_fields[5],
                "status": ticket.selected_fields[6],
                "date_opened": ticket.selected_fields[7],
                "is_urgent": ticket.selected_fields[8],
                "last_updated": ticket.selected_fields[10],
                "current_specialist": ticket.selected_fields[12]
              }
            }
            
            // Looking for matching ticket id in tenant
            const matchingBizevent = bizeventResult.records.find(event => event["event.id"] === newBizevent.id);

            if (matchingBizevent) {
              // Ticket exists
              console.log("Ticket exists");

              processTeamTransfer(newBizevent, matchingBizevent.ticket[0]);
              processSeverityChange(newBizevent, matchingBizevent.ticket[0]);
              processSolveEvent(newBizevent, matchingBizevent.ticket[0]);
            } else {
              // New data
              console.log("New ticket/chat");

              processNewEvent(newBizevent);
            }

          }



          // To handle Solved Chat/Ticket

          function processSolveEvent(newBizevent, oldBizevent) {

            // To check if there is change
            if(!(
              newBizevent.data.status !== oldBizevent.status &&
              newBizevent.data.status === "solved"
            )){
              return;
            }
            
            console.log("Chat/Ticket Was Closed");        
            if( 
                constVariables.enableSolveAlert
              ) {
                slackResponse += `\n• :large_blue_circle: *Closed Chat/Ticket Alert:*
                  \t • Customer: *_${newBizevent.data.customer}_*
                  \t • Opened Time: \`${newBizevent.data.date_opened}\`
                  \t • Ticket ID: \`${newBizevent.id}\`, <${newBizevent.data.ticket_link}|Ticket Link>
                  \t • Topic: \`${newBizevent.data.topic}\`
                  `; 
              }
            
              ingestAsBizevent(newBizevent);
          }



          // To handle Severity Change

          function processSeverityChange(newBizevent, oldBizevent) {

            // To check if there is change
            if(
              newBizevent.data.severity === oldBizevent.severity
            ){
              return;
            }
            
            console.log("Chat/Ticket Severity Changed");        
            if( 
                constVariables.enableSevChangeAlert
              ) {
                slackResponse += `\n• :large_green_circle: *Severity Change Alert:*
                  \t • Customer: *_${newBizevent.data.customer}_*
                  \t • Opened Time: \`${newBizevent.data.date_opened}\`
                  \t • Ticket ID: \`${newBizevent.id}\`, <${newBizevent.data.ticket_link}|Ticket Link>
                  \t • Topic: \`${newBizevent.data.topic}\`
                  \t • Severity Change: \`${oldBizevent.severity}\` --> \`${newBizevent.data.severity}\`
                  `; 
              }
            
              ingestAsBizevent(newBizevent);
          }



          // To handle Team Transfer/Change

          function processTeamTransfer(newBizevent, oldBizevent) {

            // To check if there is change
            if(
              newBizevent.data.assigned_team === oldBizevent.assigned_team
            ){
              return;
            }
            
            console.log("Chat/Ticket Assigned Team Changed");        
            if( 
                constVariables.enableTransferAlert
              ) {
                slackResponse += `\n• :black_circle: *Assigned Team Changed Alert:*
                  \t • Customer: *_${newBizevent.data.customer}_*
                  \t • Opened Time: \`${newBizevent.data.date_opened}\`
                  \t • Ticket ID: \`${newBizevent.id}\`, <${newBizevent.data.ticket_link}|Ticket Link>
                  \t • Topic: \`${newBizevent.data.topic}\`
                  \t • Assigned Team Change: \`${oldBizevent.assigned_team}\` --> \`${newBizevent.data.assigned_team}\`
                  `; 
              }
            
              ingestAsBizevent(newBizevent);
          }



          // To handle New chat/ticket

          function processNewEvent(newBizevent) {

            if(
              constVariables.enableNewAlert
            ) {
                slackResponse += `\n• :red_circle: *New Chat/Ticket Alert:*
                  \t • Current Status: *_${newBizevent.data.status}_*
                  \t • Customer: *_${newBizevent.data.customer}_*
                  \t • Opened Time: \`${newBizevent.data.date_opened}\`
                  \t • Ticket ID: \`${newBizevent.id}\`, <${newBizevent.data.ticket_link}|Ticket Link>
                  \t • Topic: \`${newBizevent.data.topic}\`
                  `;

                slackWorkflowResponse = {
                  blocks: [
                    {
                      type: "section",
                      text: {
                        type: "mrkdwn",
                        text: `:red_circle: *New Chat/Ticket Alert:*`
                      }
                    },
                    {
                      type: "section",
                      fields: [
                        {
                          type: "mrkdwn",
                          text: `*Current Status:*\n_${newBizevent.data.status}_`
                        },
                        {
                          type: "mrkdwn",
                          text: `*Customer:*\n_${newBizevent.data.customer}_`
                        },
                        {
                          type: "mrkdwn",
                          text: `*Opened Time:*\n\`${newBizevent.data.date_opened}\``
                        },
                        {
                          type: "mrkdwn",
                          text: `*Ticket ID:*\n\`${newBizevent.id}\`, <${newBizevent.data.ticket_link}|Ticket Link>`
                        },
                        {
                          type: "mrkdwn",
                          text: `*Topic:*\n\`${newBizevent.data.topic}\``
                        }
                      ]
                    }
                  ]
                };

              console.log(JSON.stringify(slackResponse)); // For debugging purposes
              // Send the slackResponse to Slack API
              }

            ingestAsBizevent(newBizevent);
          }



          /**
           * Function to ingest the ticket as Bizevent Data.
           * @param {Object} ticketBody - The ticket object containing all necessary information in JSON format.
           */
          function ingestAsBizevent( ticketBody ){
            
            businessEventsClient
              .ingest({
                body: ticketBody,
                type: 'application/cloudevent+json',
              })
              .then(() => {
                console.log('\n\nEvent ingested');
                console.log(`\nBizevent Body -> \n`, JSON.stringify(ticketBody, null, 2));
              })
              .catch((e) => console.error('Failed to ingest event: ' + e));

          }



          /**
           * Function to get the account name from the requester email domain.
           * @param {string} email - The email address of the requester.
           * @returns {string|null} - Returns the domain part of the email without ".com" or null if the domain part doesn't exist.
           */
          function getEmailDomain (email){
              // Split the email address at the '@' symbol
              let parts = email.split('@');
              
              // Check if the domain part exists
              if (parts.length > 1) {
                  let domain = parts[1];
                  
                  // Remove the ".com" at the end if it exists
                  if (domain.endsWith('.com')) {
                      domain = domain.slice(0, -4);
                  }
                  
                  return domain;
              }
              
              return null;
          }



          /**
           * This function extracts the ticket ID from a given URL.
           * @param {string} url - The URL containing the ticket ID.
           * @returns {string|null} - Returns the extracted ticket ID or null if not found.
           */
          function extractTicketId(url) {
              // Use a regular expression to match the ticket ID in the URL
              const match = url.match(/tickets\/(\d+)/);
              return match ? match[1] : null;
          }

      position:
        x: 0
        y: 3
      predecessors:
        - query_totango
        - get_bizevents
      conditions:
        states:
          get_bizevents: SUCCESS
          query_totango: SUCCESS
        custom: ""
    get_bizevents:
      name: get_bizevents
      description: Executes DQL query
      action: dynatrace.automations:execute-dql-query
      input:
        query: >-
          // Getting list of bizevents from the tenant. Grouping them by the
          ticket id


          fetch bizevents, from: -7d

          | filter event.type == "zendesk.ticket.v2"

          | sort timestamp desc

          | summarize {ticket=collectArray(record(
                                        timestamp, 
                                        assigned_team, 
                                        current_specialist, 
                                        customer, 
                                        customer_email, 
                                        date_opened, 
                                        is_urgent, 
                                        last_updated, 
                                        severity, 
                                        status, 
                                        ticket_link, 
                                        topic
                                        ))}, by:{event.id}
      position:
        x: -1
        y: 2
      predecessors:
        - variables
      conditions:
        states:
          variables: OK
    query_totango:
      name: query_totango
      description: Issue an HTTP request to any API
      action: dynatrace.automations:http-function
      active: true
      input:
        url: https://api.totango.com/api/v1/search/accounts/collections
        method: POST
        headers:
          app-token: '{{result("variables")["token"]}}'
          Content-Type: application/x-www-form-urlencoded
        payload: >-
          query={
            "terms": [
              {
                "type": "or",
                "or": [
                  {
                    "type": "parent_account",
                    "terms": [
                      {
                        "type": "string_attribute",
                        "attribute": "Product Specialist",
                        "in_list": ["{{result("variables")["name"]}}"]
                      }
                    ]
                  },
                  {
                    "type": "parent_account",
                    "terms": [
                      {
                        "type": "string_attribute",
                        "attribute": "Customer Success Engineer",
                        "in_list": ["{{result("variables")["name"]}}"]
                      }
                    ]
                  },
                  {
                    "type": "and",
                    "and": [
                      {
                        "type": "parent_account",
                        "terms": [
                          {
                            "type": "string_attribute",
                            "attribute": "Onboarding Specialist",
                            "in_list": ["{{result("variables")["name"]}}"]
                          },
                          {
                            "type": "lifecycle_attribute_stage_by_id",
                            "attribute": "onboarding lifecycle status ",
                            "not_in_list": ["3"]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "type": "string_attribute",
                "attribute": "Status",
                "not_in_list": ["closed"]
              },
              { "type": "string", "term": "collection_type", "eq": "supportTickets" }
            ],
            "count": 1000,
            "offset": 0,
            "fields": [
              {
                "type": "string_attribute",
                "attribute": "Ticket Link",
                "field_display_name": "Ticket Link"
              },
              {
                "type": "string_attribute",
                "attribute": "Reporter",
                "field_display_name": "Reporter"
              },
              {
                "type": "string_attribute",
                "attribute": "Channel",
                "field_display_name": "Channel Source"
              },
              {
                "type": "string_attribute",
                "attribute": "Dynatrace ONE Support Team",
                "field_display_name": "Dynatrace ONE Support Team"
              },
              {
                "type": "string_attribute",
                "attribute": "Subject",
                "field_display_name": "Subject"
              },
              {
                "type": "string_attribute",
                "attribute": "Severity",
                "field_display_name": "Severity"
              },
              {
                "type": "string_attribute",
                "attribute": "Status",
                "field_display_name": "Status"
              },
              {
                "type": "simple_date_attribute",
                "attribute": "CreatedDate",
                "field_display_name": "Created Date",
                "asc": true
              },
              {
                "type": "string_attribute",
                "attribute": "Escalated",
                "field_display_name": "Escalated"
              },
              {
                "type": "string_attribute",
                "attribute": "MissedSLA",
                "field_display_name": "Missed SLA"
              },
              {
                "type": "simple_date_attribute",
                "attribute": "NextReplyTarget",
                "field_display_name": "Next Reply Target"
              },
              {
                "type": "string_attribute",
                "attribute": "SupportLevel",
                "field_display_name": "Support Level"
              },
              {
                "type": "string_attribute",
                "attribute": "Assignee",
                "field_display_name": "Assignee"
              },
              {
                "type": "string_attribute",
                "attribute": "TimetoResolution",
                "field_display_name": "Time to Resolution"
              },
              {
                "type": "string_attribute",
                "attribute": "csatscore",
                "field_display_name": "CSAT Score"
              },
              {
                "type": "string_attribute",
                "attribute": "Status",
                "field_display_name": "Status"
              },
              {
                "type": "string_attribute",
                "attribute": "Subject",
                "field_display_name": "Subject"
              }
            ],
            "scope": "all",
            "parent_account_fields": [
              {
                "type": "owner",
                "account_role": "Customer Success Engineer",
                "field_display_name": "Customer Success Engineer",
                "index": 15
              },
              {
                "type": "owner",
                "account_role": "Product Specialist",
                "field_display_name": "Product Specialist",
                "index": 18
              },
              {
                "type": "owner",
                "account_role": "Onboarding Specialist",
                "field_display_name": "Onboarding Specialist",
                "index": 19
              },
              {
                "type": "lifecycle_attribute",
                "attribute": "onboarding lifecycle status ",
                "field_display_name": "Onboarding Stage",
                "index": 20
              }
            ]
          }
        failOnResponseCodes: 400-599
      position:
        x: 1
        y: 2
      predecessors:
        - variables
      conditions:
        states:
          variables: OK
    sandbox_message:
      name: sandbox_message
      description: Send a message to a Slack workspace
      action: dynatrace.slack:slack-send-message
      input:
        channel: C065Q1C68MR
        message: '{{result("main_script").slackResponse}}'
        reaction: []
        connection: ""
        workflowID: "{{ execution().workflow.id }}"
        channelType: id
        executionID: "{{ execution().id }}"
        executionDate: "{{ execution().started_at }}"
        appendToThread: false
        selectedRequestType: 0
        attachmentToggleValue: none
      position:
        x: 1
        y: 4
      predecessors:
        - main_script
      conditions:
        states:
          main_script: SUCCESS
        custom: '{{ result("main_script").slackResponse != "*Zendesk chat updates:*"}}'
    main_workflow_message:
      name: main_workflow_message
      description: Issue an HTTP request to any API.
      action: dynatrace.automations:http-function
      input:
        url: '{{result("variables")["slackWorkflowURL"]}}'
        method: POST
        payload: |-
          {
            "response": "{{result("main_script").slackResponse}}"
          }
        failOnResponseCodes: 400-599
      position:
        x: -1
        y: 4
      predecessors:
        - main_script
      conditions:
        states:
          main_script: SUCCESS
        custom: '{{ result("main_script").slackResponse != "*Zendesk chat updates:*"}}'
  description: This workflow is for collecting currently opened customer chats,
    and sending an email at 7 AM with the ticket names and links
  trigger:
    schedule:
      rule: null
      trigger:
        type: cron
        cron: "*/15 8-16 * * *"
      timezone: America/Denver
      isActive: true
      isFaulty: false
      nextExecution: 2025-02-11T15:00:00.000Z
      filterParameters:
        earliestStart: 2025-01-15
        earliestStartTime: 13:24
      inputs: {}
  schemaVersion: 3
  result: null
  input: {}
  type: STANDARD
